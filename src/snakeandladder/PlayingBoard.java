
package snakeandladder;

import java.awt.Color;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author SampritBiswas
 * Roll : 11CS10038
 */
public class PlayingBoard extends javax.swing.JFrame{

    /**
     * Creates new form PlayingBoard
     */
    public PlayingBoard() {
        setRows=8;
        setColumns=8;
        grid = new JLabel[setColumns*setRows];
        initComponents();
    }
    public PlayingBoard(customizeBoard cus) {
        this.cus=cus;
        setRows=cus.getRows();
        setColumns=cus.getColumns();
        grid = new JLabel[setColumns*setRows];
        for(int i=0;i<setColumns*setRows;i++){
            grid[i] = new JLabel();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rollDiceButton = new javax.swing.JButton();
        imageLabelPlayer1 = new javax.swing.JLabel();
        imageLabelPlayer2 = new javax.swing.JLabel();
        imageLabelPlayer3 = new javax.swing.JLabel();
        playersTurnLabel = new javax.swing.JLabel();
        greenPlayer1Label = new javax.swing.JLabel();
        yellowPlayyer2Label = new javax.swing.JLabel();
        bluePlayer2Label = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        scoreCardMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(700, 700));

        rollDiceButton.setText("Roll Dice");
        rollDiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDiceButtonActionPerformed(evt);
            }
        });

        imageLabelPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/snakeandladder/images/button1s.gif"))); // NOI18N

        imageLabelPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/snakeandladder/images/button2.gif"))); // NOI18N

        imageLabelPlayer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/snakeandladder/images/button3.gif"))); // NOI18N

        playersTurnLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        greenPlayer1Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        yellowPlayyer2Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        bluePlayer2Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(rollDiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playersTurnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageLabelPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greenPlayer1Label)
                .addGap(18, 18, 18)
                .addComponent(imageLabelPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yellowPlayyer2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imageLabelPlayer3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bluePlayer2Label)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greenPlayer1Label)
                    .addComponent(yellowPlayyer2Label)
                    .addComponent(bluePlayer2Label))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playersTurnLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rollDiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageLabelPlayer2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageLabelPlayer3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(imageLabelPlayer1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setLayout(new java.awt.GridLayout(setRows, setColumns));

        jMenu1.setBackground(new java.awt.Color(102, 255, 255));
        jMenu1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 255, 102), new java.awt.Color(102, 255, 0), null, null));
        jMenu1.setForeground(new java.awt.Color(153, 0, 153));
        jMenu1.setText("File");

        newGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newGameMenuItem.setText("New Game");
        newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newGameMenuItem);

        scoreCardMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        scoreCardMenuItem.setText("Score Card");
        scoreCardMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreCardMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(scoreCardMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rollDiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDiceButtonActionPerformed

        if(player.won==1){
            return;
        }
        
        Random randomGenerator = new Random();
        int random = randomGenerator.nextInt(6)+1;
                
        String message = player.getPlayerName(player.turn)+" you got : "+random;
        String name = player.getPlayerName(player.turn);
        JOptionPane.showMessageDialog(new JFrame(), message,name, JOptionPane.INFORMATION_MESSAGE);
        
        if(player.checkValidity(player.turn, random)==0){
            player.setMoves(player.turn);
            player.setTurn();
            return;
        }
        
        random = cus.eatenBySnake(random,player.getLocation(player.turn)-random);
        random = cus.climbLadder(random,player.getLocation(player.turn)-random);
        random = cus.eatenBySnake(random,player.getLocation(player.turn)-random);
        if(player.checkValidity(player.turn, random)==0){
            player.setMoves(player.turn);
            player.setTurn();
            return;
        }        
        
        if(grid[player.getLocation(player.turn)].getIcon()==getImage(6)){
            if(player.turn==0){
               grid[player.getLocation(player.turn)].setIcon(getImage(23));
            }
            if(player.turn==1){
               grid[player.getLocation(player.turn)].setIcon(getImage(13));
            }
            if(player.turn==2){
               grid[player.getLocation(player.turn)].setIcon(getImage(12));
            }
        }
        else if(grid[player.getLocation(player.turn)].getIcon()==getImage(3)){
            if(player.turn==0){
                grid[player.getLocation(player.turn)].setIcon(getImage(1));
            }
            else{
                grid[player.getLocation(player.turn)].setIcon(getImage(0));
            }
        }
        
        else if(grid[player.getLocation(player.turn)].getIcon()==getImage(4)){
            if(player.turn==1){
                grid[player.getLocation(player.turn)].setIcon(getImage(2));
            }
            else{
                grid[player.getLocation(player.turn)].setIcon(getImage(1));
            }
        }
        else if(grid[player.getLocation(player.turn)].getIcon()==getImage(5)){
            if(player.turn==0){
                grid[player.getLocation(player.turn)].setIcon(getImage(2));
            }
            else{
                grid[player.getLocation(player.turn)].setIcon(getImage(0));
            }
        }
        else{
            grid[player.getLocation(player.turn)].setIcon(null);
        }  

        player.setLocation(player.turn, random);
        
        if(grid[player.getLocation(player.turn)].getIcon()!=null){
            checkTheButtons();
        }
        else{
            grid[player.getLocation(player.turn)].setIcon(getImage(player.turn));
        }
        player.setMoves(player.turn);
        player.setTurn();
        playersTurnLabel.setText(player.getPlayerName(player.turn) +" its your turn now");
    }//GEN-LAST:event_rollDiceButtonActionPerformed

    private void scoreCardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreCardMenuItemActionPerformed
        menu.printHighScores();
        menu.setScoreCardFrameVisible(true);
    }//GEN-LAST:event_scoreCardMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
        
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
        setVisibility(false);
        
        
        menu = new MainMenu();
        cus = new customizeBoard();
        player = new Players();
        
        menu.setClasses(cus, player);
        cus.setClasses(player, null);
        menu.setVisibility(true);
        menu.printHighScores();
    }//GEN-LAST:event_newGameMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayingBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayingBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayingBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayingBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayingBoard().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bluePlayer2Label;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel greenPlayer1Label;
    private javax.swing.JLabel imageLabelPlayer1;
    private javax.swing.JLabel imageLabelPlayer2;
    private javax.swing.JLabel imageLabelPlayer3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JLabel playersTurnLabel;
    private javax.swing.JButton rollDiceButton;
    private javax.swing.JMenuItem scoreCardMenuItem;
    private javax.swing.JLabel yellowPlayyer2Label;
    // End of variables declaration//GEN-END:variables

    customizeBoard cus =null;
    MainMenu menu = null;    
    Players player = new Players();
    int setRows, setColumns;
    javax.swing.JLabel[] grid;
    Icon previousIcon=null;
    int twoSame=0,threeSame=0;
    Temp t =new Temp(); 
    
    public void showGrids(){
        
       setRows=cus.getRows(); setColumns=cus.getColumns();
       if(cus.getRows()>=9){
           setSize(950+setRows*20, 750); 
           
       }
       else{
           setSize(500+setRows*44, 350+setColumns*40);            
       }
       
       for(int i=0;i<setColumns*setRows;i++){
           
           
           grid[i].setBackground(Color.WHITE);
           
           grid[i].setOpaque(true);
           grid[i].setBorder(BorderFactory.createLineBorder(Color.RED));
           
           grid[i].setHorizontalAlignment(SwingConstants.RIGHT);
           grid[i].setVerticalAlignment(SwingConstants.BOTTOM);
           grid[i].setText(setColumns*setRows-i+"");
           jPanel2.add(grid[i]);
       }       

    }
    
    public void setVisibility(boolean s){
        if(s==true){
            showGrids();
            setVisible(true);           
            
        }
        else{
            setVisible(false);
        }
    }
    public void setClasses(customizeBoard c, MainMenu m, Players p){
        cus=c;
        menu=m;
        player=p;
        player.setClasses(cus,menu);
    }
    public void setButton3Visible(boolean b){
        imageLabelPlayer1.setVisible(true);
        imageLabelPlayer2.setVisible(true);
        imageLabelPlayer3.setVisible(b);
        if(b==false){
            grid[cus.setColumns*cus.setRows-1].setIcon(getImage(3));
        }
        else{
            grid[cus.setColumns*cus.setRows-1].setIcon(getImage(6));
        }
    }
    public Icon getImage(int i){
        switch(i){
            case 0 : 
                return imageLabelPlayer1.getIcon();                
            case 1 :
                return imageLabelPlayer2.getIcon();
            case 2 :
                return imageLabelPlayer3.getIcon();
            case 3 :
                return t.getTwoLabel().getIcon();
            case 4 :
                return t.get23Button().getIcon();
            case 5 :
                return t.get13Button().getIcon();
            case 6 :
                return t.getThreeLabel().getIcon();
            case 12 :
                return t.getTwoLabel().getIcon();
            case 23 :
                return t.get23Button().getIcon();
            case 13 :
                return t.get13Button().getIcon();
        }
        return null;
    }
    public void checkTheButtons(){
        if(grid[player.getLocation(player.turn)].getIcon()==getImage(0)){
            if(player.turn==1){
                grid[player.getLocation(player.turn)].setIcon(getImage(12));
            }
            else{
                grid[player.getLocation(player.turn)].setIcon(getImage(13));
            }
        }
        
        else if(grid[player.getLocation(player.turn)].getIcon()==getImage(1)){
            if(player.turn==0){
                grid[player.getLocation(player.turn)].setIcon(getImage(12));
            }
            else{
                grid[player.getLocation(player.turn)].setIcon(getImage(23));
            }
        }
        else if(grid[player.getLocation(player.turn)].getIcon()==getImage(2)){
            if(player.turn==0){
                grid[player.getLocation(player.turn)].setIcon(getImage(13));
            }
            else{
                grid[player.getLocation(player.turn)].setIcon(getImage(23));
            }
        }
        else if(grid[player.getLocation(player.turn)].getIcon()==getImage(3)){
            grid[player.getLocation(player.turn)].setIcon(getImage(6));
        }
        else if(grid[player.getLocation(player.turn)].getIcon()==getImage(4)){
            grid[player.getLocation(player.turn)].setIcon(getImage(6));
        }
        else if(grid[player.getLocation(player.turn)].getIcon()==getImage(5)){
            grid[player.getLocation(player.turn)].setIcon(getImage(6));
        }
        else{
            grid[player.getLocation(player.turn)].setIcon(null);
        }
    }
    public void setNamesInTextField(String p1, String p2, String p3){
        if(player.getNoOfPlayers()==2){
            greenPlayer1Label.setText(p1);
            yellowPlayyer2Label.setText(p2);
            bluePlayer2Label.setText("");
        }
        else if(player.getNoOfPlayers()==3){
            greenPlayer1Label.setText(p1);
            yellowPlayyer2Label.setText(p2);
            bluePlayer2Label.setText(p3);
        }
    }
}
